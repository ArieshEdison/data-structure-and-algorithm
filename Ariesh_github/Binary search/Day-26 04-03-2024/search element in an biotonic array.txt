#include <stdio.h>

int ascendingbinarysearch(int arr[], int low, int high, int key)
{
    while(low<=high)
    {
        int mid = low+(high-low)/2;
        if(arr[mid]==key)
        return mid;
        if(arr[mid]>key)
        high = mid-1;
        else
        low=mid+1;
    }
    return -1;
}

int descendingbinarysearch(int arr[], int low, int high, int key)
{
    while(low<=high)
    {
        int mid=low+(high-low)/2;
        if(arr[mid]==key)
        return mid;
        if(arr[mid]<key)
        high=mid-1;
        else
        low=mid+1;
    }
    return -1;
}

int findBitonicPoint(int arr[], int n, int l, int r)
{
    int mid;
    int biotonicpoint=0;
    mid=(r+l)/2;
    if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){
    return mid;
    }if(arr[mid]>arr[mid-1] && arr[mid]<arr[mid+1]){
    biotonicpoint=findBitonicPoint(arr, n, mid, r);
    }if(arr[mid]<arr[mid-1] && arr[mid]>arr[mid+1]){
    biotonicpoint=findBitonicPoint(arr, n, l ,mid);
    } return biotonicpoint;
}

int searchbiotonic(int arr[], int n, int key, int index)
{
    if(key>arr[index])
    return -1;
    else if(key==arr[index])
    return index;
    else
    {
        int temp = ascendingbinarysearch(arr, 0, index - 1, key);
        if(temp!=-1)
        {
            return temp;
        }
        return descendingbinarysearch(arr, index + 1, n - 1, key);
    }
}

int main() {
    int arr[] = { -8, 1, 2, 3, 4, 5, -2, -3 };
    int key;
    int n, l, r;
    n = sizeof(arr) / sizeof(arr[0]);
    l = 0;
    r = n - 1;
    int index;
    index = findBitonicPoint(arr, n, l, r);

    printf("Enter the key to search: ");
    scanf("%d", &key);

    int x = searchbiotonic(arr, n, key, index);

    if (x == -1)
        printf("Element Not Found\n");
    else
        printf("Element Found at index %d\n", x);

    return 0;
}
